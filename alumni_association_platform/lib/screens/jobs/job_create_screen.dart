import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../models/job_model.dart';
import '../../services/firebase_service.dart';

class JobCreateScreen extends StatefulWidget {
  const JobCreateScreen({super.key});

  @override
  State<JobCreateScreen> createState() => _JobCreateScreenState();
}

class _JobCreateScreenState extends State<JobCreateScreen> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _companyController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _requirementsController = TextEditingController();
  final List<String> _requirements = [];

  void _addRequirement() {
    if (_requirementsController.text.isNotEmpty) {
      setState(() {
        _requirements.add(_requirementsController.text);
        _requirementsController.clear();
      });
    }
  }

  void _removeRequirement(int index) {
    setState(() {
      _requirements.removeAt(index);
    });
  }

  Future<void> _submitJob() async {
    if (_formKey.currentState!.validate()) {
      final job = JobModel(
        id: '', // Will be generated by Firestore
        title: _titleController.text,
        company: _companyController.text,
        description: _descriptionController.text,
        requirements: _requirements,
        postedBy: Provider.of<User?>(context, listen: false)!.uid,
        createdAt: DateTime.now(),
      );

      await FirebaseService.firestore.collection('jobs').add(job.toFirestore());
      Navigator.pop(context);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Post New Job')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              TextFormField(
                controller: _titleController,
                decoration: const InputDecoration(labelText: 'Job Title'),
                validator: (value) => value!.isEmpty ? 'Required' : null,
              ),
              TextFormField(
                controller: _companyController,
                decoration: const InputDecoration(labelText: 'Company'),
                validator: (value) => value!.isEmpty ? 'Required' : null,
              ),
              TextFormField(
                controller: _descriptionController,
                decoration: const InputDecoration(labelText: 'Description'),
                maxLines: 3,
                validator: (value) => value!.isEmpty ? 'Required' : null,
              ),
              const SizedBox(height: 16),
              const Text('Requirements:', style: TextStyle(fontWeight: FontWeight.bold)),
              ..._requirements.map((req) => ListTile(
                title: Text(req),
                trailing: IconButton(
                  icon: const Icon(Icons.remove_circle),
                  onPressed: () => _removeRequirement(_requirements.indexOf(req)),
                ),
              )).toList(),
              Row(
                children: [
                  Expanded(
                    child: TextFormField(
                      controller: _requirementsController,
                      decoration: const InputDecoration(labelText: 'Add Requirement'),
                    ),
                  ),
                  IconButton(
                    icon: const Icon(Icons.add_circle),
                    onPressed: _addRequirement,
                  ),
                ],
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: _submitJob,
                child: const Text('Post Job'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}